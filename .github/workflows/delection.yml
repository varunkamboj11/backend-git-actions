name: Remove Test Environment
on:
  pull_request:
    branches:
      - main
    types: [closed]
jobs:
  terraform_apply:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1

    - name: Install Terraform
      env:
        TERRAFORM_VERSION: "0.12.15"
      run: |
        tf_version=$TERRAFORM_VERSION
        wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
        unzip terraform_"$tf_version"_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
    
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}



    - name: Verify Terraform version
      run: terraform --version
    - shell: bash
      run: |
        echo "$GITHUB_ACTOR"-"$GITHUB_RUN_NUMBER"
        echo "the reference = " ${GITHUB_REF}
        echo "try fail val = " ${GITHUB_REF##*/}
        echo "the name = " ${{ steps.get_version.outputs.VERSION }}
  #      echo "the failing last = " ${{ steps.ssm_para.outputs.branch }}
    
 
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      id: git
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
    - shell: bash
      run: |
        aws ssm put-parameter  --name "ebs_mongo_db_name_dev" --type "String"  --value "${{ steps.get_version.outputs.VERSION }}" --overwrite
        
    




#         echo ::set-output name=dns_id::$(echo $(aws ssm get-parameters --with-decryption --names variable_dns_zone_id  --query 'Parameters[*].Value' --output text))

#         echo ::set-output name=load_arn::$(echo $(aws ssm get-parameters --with-decryption --names variable_loadbalancer_certificate_arn  --query 'Parameters[*].Value' --output text))

    
#         echo "the oauth = " ${{ steps.git.outputs.git_param }}
#         echo "the arn = " ${{ steps.git.outputs.load_arn }}
#         echo "the dns id = " ${{ steps.git.outputs.dns_id }}  
#         echo "the branch is = " ${{ steps.get_version.outputs.VERSION }}

      
#         echo "##[set-output name=git_param;]::$(aws ssm get-parameters --with-decryption --names variable_build_github_oauth_token  --query 'Parameters[*].Value' --output text)"
        
#         echo "##[set-output name=dns_id;]::$(aws ssm get-parameters --with-decryption --names variable_dns_zone_id  --query 'Parameters[*].Value' --output text)"

#         echo "##[set-output name=load_arn;]::$(aws ssm get-parameters --with-decryption --names variable_loadbalancer_certificate_arn  --query 'Parameters[*].Value' --output text)"
        
        
#        echo "##[set-output name=git_param;]::$(echo {"aws ssm get-parameters --with-decryption --names variable_build_github_oauth_token  --query 'Parameters[*].Value' --output text"})"
#        echo "##[set-output name=load_arn;]::$(echo {"aws ssm get-parameters --with-decryption --names variable_loadbalancer_certificate_arn  --query 'Parameters[*].Value' --output text"})"
#        echo "##[set-output name=dns_id;]::$(echo {"aws ssm get-parameters --with-decryption --names variable_dns_zone_id  --query 'Parameters[*].Value' --output text"})"
  
#         SECRET=$1
#         getEnvironmentVariable() {
#           ssm_value=$(aws ssm get-parameter --name "variable_build_github_oauth_token" --with-decryption --query 'Parameter.Value' --output text)
#           export "${SECRET}"="${ssm_value}"
           
           
      
#           }
#         echo "${SECRET}"

#         getEnvironmentVariable "TEST_SECRET_1"
         
         


#        FAIL1 = "aws ssm get-parameters --with-decryption --names variable_build_github_oauth_token  --query 'Parameters[*].Value' --output text"
#        echo "the failiure result = " ${FAIL1}
    - name: Verify outputs
      run: terraform --version
    - shell: bash
      run: |
        echo "the oauth = " ${{ secrets.AWS_GIT_PARAM}}
        echo "the arn = " ${{ secrets.AWS_LOAD_ARN}}
        echo "the dns id = " ${{ secrets.AWS_DNS_ID}}
        echo "the name = " ${{ steps.get_version.outputs.VERSION }}

        
        

      
    
        
#         TF_VAR_variable_build_github_oauth_token: ${{ secrets.GITHUB_OAUTH }}
#         TF_VAR_variable_loadbalancer_certificate_arn: ${{ secrets.LOAD_CERT }}
#         TF_VAR_variable_dns_zone_id: ${{ secrets.DNS_ID }}


      
#         TF_VAR_variable_build_github_oauth_token: $(aws ssm get-parameters --with-decryption --names variable_build_github_oauth_token  --query 'Parameters[*].Value' --output text)
#         TF_VAR_variable_loadbalancer_certificate_arn: $(aws ssm get-parameters --with-decryption --names variable_loadbalancer_certificate_arn  --query 'Parameters[*].Value' --output text)
#         TF_VAR_variable_dns_zone_id: $(aws ssm get-parameters --with-decryption --names variable_dns_zone_id  --query 'Parameters[*].Value' --output text)
        
        
        
      
#       run: terraform init -input=false



    
#         TF_VAR_variable_build_github_oauth_token: ${{ steps.git.outputs.git_param }}
#         TF_VAR_variable_loadbalancer_certificate_arn: ${{ steps.git.outputs.load_arn }}
#         TF_VAR_variable_dns_zone_id: ${{ steps.git.outputs.dns_id }}
#         TF_VAR_variable_loadbalancer_certificate_arn: $(aws ssm get-parameters --with-decryption --names variable_loadbalancer_certificate_arn  --query 'Parameters[*].Value' --output text)
#         TF_VAR_variable_dns_zone_id: $(aws ssm get-parameters --with-decryption --names variable_dns_zone_id  --query 'Parameters[*].Value' --output text)
 

    - name: Verify Terraform version
      run: terraform --version
    - shell: bash
      run: |
        echo "$GITHUB_ACTOR"-"$GITHUB_RUN_NUMBER"
        echo "the reference = " ${GITHUB_REF}
        echo "try fail val = " ${GITHUB_REF##*/}
        echo "the name = " ${{ steps.get_version.outputs.VERSION }}
        aws s3 cp s3://day0day01/main.tf .
        key_name=${{ github.head_ref }}
        #sed -e 's/demo/$key_name/g' main.tf
        terraform init
        terraform destroy --auto-approve
        
        
